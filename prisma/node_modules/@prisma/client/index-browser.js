
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  studentNumber: 'studentNumber',
  contactNumber: 'contactNumber',
  sex: 'sex',
  password: 'password',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  equipmentId: 'equipmentId',
  qrCodeValue: 'qrCodeValue',
  category: 'category',
  condition: 'condition',
  status: 'status',
  stockCount: 'stockCount',
  purchaseCost: 'purchaseCost',
  images: 'images',
  editHistory: 'editHistory',
  maintenanceLog: 'maintenanceLog',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  courseCode: 'courseCode',
  section: 'section',
  semester: 'semester',
  isActive: 'isActive',
  ficId: 'ficId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserClassEnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  classId: 'classId',
  createdAt: 'createdAt'
};

exports.Prisma.BorrowScalarFieldEnum = {
  id: 'id',
  requestSubmissionTime: 'requestSubmissionTime',
  requestedStartDate: 'requestedStartDate',
  borrowerId: 'borrowerId',
  classId: 'classId',
  ficId: 'ficId',
  equipmentId: 'equipmentId',
  borrowStatus: 'borrowStatus',
  approvedByFicId: 'approvedByFicId',
  approvedByStaffId: 'approvedByStaffId',
  checkoutTime: 'checkoutTime',
  expectedReturnTime: 'expectedReturnTime',
  actualReturnTime: 'actualReturnTime',
  returnCondition: 'returnCondition',
  returnRemarks: 'returnRemarks',
  editHistory: 'editHistory',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BorrowGroupMateScalarFieldEnum = {
  id: 'id',
  borrowId: 'borrowId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.DeficiencyScalarFieldEnum = {
  id: 'id',
  borrowId: 'borrowId',
  userId: 'userId',
  taggedById: 'taggedById',
  ficToNotifyId: 'ficToNotifyId',
  type: 'type',
  status: 'status',
  description: 'description',
  resolution: 'resolution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  REGULAR: 'REGULAR',
  FACULTY: 'FACULTY',
  STAFF: 'STAFF'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  INACTIVE: 'INACTIVE'
};

exports.EquipmentCategory = exports.$Enums.EquipmentCategory = {
  INSTRUMENTS: 'INSTRUMENTS',
  ACCESSORIES: 'ACCESSORIES',
  TOOLS: 'TOOLS',
  CONSUMABLES: 'CONSUMABLES',
  OTHER: 'OTHER'
};

exports.EquipmentStatus = exports.$Enums.EquipmentStatus = {
  AVAILABLE: 'AVAILABLE',
  RESERVED: 'RESERVED',
  BORROWED: 'BORROWED',
  UNDER_MAINTENANCE: 'UNDER_MAINTENANCE',
  DEFECTIVE: 'DEFECTIVE',
  OUT_OF_COMMISSION: 'OUT_OF_COMMISSION'
};

exports.BorrowStatus = exports.$Enums.BorrowStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  ACTIVE: 'ACTIVE',
  PENDING_RETURN: 'PENDING_RETURN',
  RETURNED: 'RETURNED',
  COMPLETED: 'COMPLETED',
  REJECTED_FIC: 'REJECTED_FIC',
  REJECTED_STAFF: 'REJECTED_STAFF',
  CANCELLED: 'CANCELLED',
  OVERDUE: 'OVERDUE'
};

exports.DeficiencyType = exports.$Enums.DeficiencyType = {
  LATE_RETURN: 'LATE_RETURN',
  MISHANDLING: 'MISHANDLING',
  DAMAGE: 'DAMAGE',
  LOSS: 'LOSS',
  OTHER: 'OTHER'
};

exports.DeficiencyStatus = exports.$Enums.DeficiencyStatus = {
  UNRESOLVED: 'UNRESOLVED',
  RESOLVED: 'RESOLVED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.Prisma.ModelName = {
  User: 'User',
  Equipment: 'Equipment',
  Class: 'Class',
  UserClassEnrollment: 'UserClassEnrollment',
  Borrow: 'Borrow',
  BorrowGroupMate: 'BorrowGroupMate',
  Deficiency: 'Deficiency'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
